GitURL: https://github.com/avamsykiran/Angular_Feb17Mar09_09001100.git

Pre-requisites
------------------------
    1. Javascript (ES6)
        Core Javascript Objects
        Functions are also objects
        Arrow Functions, IIFE 
        Sugar Syntax
            template leterals
            multi-line strings
            destructured assignments
        Array functions
        Array prototype functions
        Object Functions
        Spread Operator
    
    2. Node JS
        Javascript runtime enviroment
        npm 
        node project structure.

Enviroment
-------------------------
    NodeJS                  https://nodejs.org/en/
                            node -v
    
    NPM                     npm -v

    Angular CLI             npm install -g @angular/cli
                            ng --version
    
    Visual Studio Code      https://code.visualstudio.com/download

Node JS
------------------------------------

    is a runtime or execution platform for Javascript.

    node        
    npm     node package manager

            package is any Javascript library

    Create a node project:  npm init -y


Angular
------------------------------------------

    AngularJS 1   

            Developed on javascript
            Used only with javascript

    Angular 2 to  Angular 11

            Developed on javascript
            Used only with javascript and typescript
            It is recomemded to be used on typescript.

        Typescript = Javascript + Data Types (Type Safty)

        Brower can not understand typescript
        Hence we have to transcript (compile) typescript into javascript
        before we execute it on the Brower.

        babel       is mostly used for typescript to javascript compilation.

    Angular is used for developing SPA (client side application).

    SPA - Single Page Application.

    Angular applications are not executed on node.
    But they are developed on node platform.

    For the sake of
        package management
        compilation
        building distructable bundles
        testing
    we develop on node platform.

    once bundled, the bundle execute on browser.


    Creating an angular application on node

    1. create a project folder
    2. create a project using npm init -y
    3. install all libraries usign npm install
            angular core libraries
            bebel
            grun/gulp for project life cycle management
            karma for test execution
            jasmine for wrting test cases
            ................and other libraries

    Angular CLI comes to rescue

    Angular CLI
    --------------------------------------------
    Command line interface

        helps in creating a new angular project 
        with all required configuarations and installations.

        helps in crating angular building blocks.


        ng new projectName

        ng serve --port 4200 -o

                   starts the live angular development server
                            1. it compile all the existing typescript to javascript
                            2. the compiled code is not stored anywhere bu tis palce in-memory
                            3. it serves the code to the broser whenevr requested.
                            4. it monitors the angualr file and 
                                    any modification to any angular file
                                    will trigger the recompilation and restart of the servr.

        
        ng build            builds the distructable files 

                            1. it compile all the existing typescript to javascript
                            2. it stores the compiled code in the 'dist' folder.


        ng g component ComponentName
        ng g directive DirectiveName
        ng g pipe PipeName
        ng g service ServiceName
        ng g module ModuleName
        ng g class ClassName
        


Day 2
---------------------------------------------------------------------------------------------

    SPA?

            Single Page Application

            1. These application have one and only page (html docuemnt) .
            2. This page is composed of different 
                dynamically loadable and replaceble sections called COMPONENTS.
            

            DataServer <---> WebServer <----------URL---------- Client
                                        --html,css,javascript----> old page must unlaod
                                                                and a new page must reload.

                                                                
            DataServer <---> WebServer                                 
                                |   
                                |- UI app      <----First Req               Client
                                |    ----A bundle of JS,CSS + index.html---->
                                |
                                |- Rest API      <----rest api request
                                                -------Data in JSON/XML ----->


    Angular Achetecture (Buidling Blocks) ?

            The SPA framewworks/libraries like angular
            add extandability to HTML.

            We can create and use our own HTML elements and attributes.

            Modules

                    Logical group of Directives,Components,Pipes,Service and
                    other modules.

                    Root Module
                        Every Angular Application must be inside
                        on single module called Root Module.

                    Feature Module

                        Inside the root module 
                        we can include any otehr sub-modules called Feature Modules

                    @NgModule({

                    })
                    class MyModule {

                    }

            Directives

                    Are the one that add extendability to HTML.

                    Component Directives    in short known as Component
                            Each component is a user defiend HTML Tag (Element).

                    Attributes Directives   in short known as Directive
                            Each Directive is a user defiend HTML Attribute.

                        Structural Directives

                            ngIf
                            ngSwitch
                            ngFor

                        Event Directives

                            click
                            dblClick
                            blur
                            ....etc

                        Built-In Directives

                            ngModel
                            ngForm
                            readonly
                            routeLink
                            ...etc
                        
                        Custome Attribute Directives

                            @Directive({

                            })
                            class MyDirective{

                            }


            Components      (Component Directives)

                    Each component is a user defiend HTML Tag (Element).

                    Component = Template + Controller

                    BuiltIn Components
                        <ng-tempalte></ng-tempalte>
                        <ng-content></ng-content>
                        <ng-container></ng-container>
                        <router-outlet></router-outlet>
                        ...etc


                    Custome Component
                    ---------------------------

                    my.component.ts  (controller)

                    @Component({
                        selector:'my-tag',
                        templateUrl:'my.component.html'
                    })
                    class MyComponent{
                        
                        friends = ["Vamsy","Sunitha","Ram"];

                    }

                    my.component.html (template)
                        <ul>
                            <li *ngFor="let fnm of friends">{{fnm}}</li>
                        </ul>


                    <html>
                        <body>
                            <my-tag></my-tag>
                        </body>
                    </html>


                    <html>
                        <body>
                           <ul>
                            <li>Vamsy</li>
                            <li>Sunitha</li>
                            <li>Ram</li>
                           </ul>
                        </body>
                    </html>


            Pipes

                    used for tranforming a given input into 
                    a differnt format

                    ButilIn Pipes
                    -----------------

                        lowercase
                        uppercase
                        number
                        percent
                        currency
                        date
                        json
                        async

                    Custome Pipes
                    ---------------
                    @Pipe({

                    })
                    class MyPipe{

                    }

            Services

                    is a class that holds bussiness logic / api communication logic

                    @Injectable({

                    })
                    class MyService{

                    }

Styling
---------------------------------------------

Global Styling

        src/styles.css

Component Level Local Styling

        component specific css file

Data Binding
----------------------------------------------

Binding Resources On Controller With Template

    Interpolation

        {{angular-expression}}

    One-Way Binding

        [attributeName]="angular-expression"
        attributeName="value"

        <img src="logo.png" />
        <img [src]="logoFile" />

    Two-Way Binding

        ngModel     is an attribute directive that supports two way Binding.

                    belongs to FormsModule

        [(ngModel)]="variableName"

    Event Binding

        Event Attribute Directive  = HtmlEventAttribute - "on"

        (eventAttributeName)="angualrFunction()"

    Style Binding

        [style.styleProperty]="variable"

        switching a css class:

                [class]="{className:true/false,class2Name:true/false}"

  Pipes
  -------------------------------------------------------

                        lowercase
                        uppercase
                        number
                        percent
                        currency
                        date
                        json
                        async


















